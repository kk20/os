Macropass1
//This code works for both absolute and relative programs
//Following 2 assumptions are made regarding instruction formats
//1.	That RX instructions follow the order i.e. first operand is always an R, second is an X
//2.	That RR instructions always specify registers using integers and never variables
//When testing your own program, add your instructions in the mot array, update MAX_MOTs and chage filename in fopen.

#include "stdio.h"
#include "string.h"
#include "math.h"

char mot[10][10] = {"L","A","ST"};	//machine opcodes 
char pot[10][10] = {"USING","DC","DS","EQU","DROP","END"};	//pseudo-op
int MAX_MOT = 3;
int MAX_POT = 6;

struct literal
{
	char name[20];
	int addr;
} lit[20];		//assume 20 max literals

struct symbol
{
	char name[20];
	int addr;
} sym[20];		//assume 20 max symbols

int main(){
	int lc = 0, k = 0, symbols = 0, literals = 0, dontenter = 0, isabsolute = 0, ascii[20], i,j;
	char wc[10];		//stores the current word
	char prev[10];		//store the word preceeding wc
	FILE *fip,*fsym,*flit;
	fip = fopen("input3.asm","r");
	fsym = fopen("symbol.txt","w");
	flit = fopen("literal.txt","w");

	fscanf(fip,"%s",wc);
	while(!feof(fip)){

		if( dontenter == 0){	
			if( fabs(strcmp(wc,"START")) ){	
				//The first word is not START
				strcpy(sym[symbols].name,wc);		//Put the label in sym struct
				sym[symbols++].addr = lc;
				fscanf(fip,"%s",wc);		//wc now holds start
				dontenter = 1;
				fscanf(fip,"%s",wc);
				//If START is followed by an integer, consider the ALP as absolute
				//Initialize LC to that address
				for(i=0; i<strlen(wc); i++)
					if(!isdigit(wc[i])){
						isabsolute = 0;
						break;
					}
				if(i == strlen(wc)){
					isabsolute = 1;
					for(k=0,j=0; k<strlen(wc); k++){
						j = j*10 + (int)wc[k] - '0';
					}
					printf("Load Address = %d\n",j);
					lc = lc + j;
				}
			}
		}

		if(isabsolute == 1)
			fscanf(fip,"%s",wc);		//wc now holds the next word for processing
		isabsolute = 1;

		//Search for word in POT
		BEWARE:for(i=0; i<MAX_POT; i++){
			if(!strcmp(wc,pot[i])){
				if( !strcmp(wc,"USING") || !strcmp(wc,"DROP")){
					//Do nothing
					break;
				}
				if( !strcmp(wc,"END")){
					//Go to pass 2 i.e. end the execution
					break;
				}
				if( !strcmp(wc,"DC") || !strcmp(wc,"DS")){
					//Symbol Processing
					if(!strcmp(wc,"DC")){
						fscanf(fip,"%s",prev);
						fscanf(fip,"%s",wc);
						sym[j].addr = lc;
						//Update the LC
						if(!strcmp(prev,"B"))
							lc = lc + 1;
						if(!strcmp(prev,"H"))
							lc = lc + 2;
						if(!strcmp(prev,"F"))
							lc = lc + 4;
						if(!strcmp(prev,"D"))
							lc = lc + 8;
					}
					if(!strcmp(wc,"DS")){
						fscanf(fip,"%s",prev);
						fscanf(fip,"%s",wc);
						sym[j].addr = lc;
						if(!strcmp(prev,"B"))
							lc = lc + 1;
						if(!strcmp(prev,"H"))
							lc = lc + 2;
						if(!strcmp(prev,"F"))
							lc = lc + 4;
						if(!strcmp(prev,"D"))
							lc = lc + 8;
						if(!strcmp(wc,"B")||!strcmp(wc,"F")||!strcmp(wc,"H")||!strcmp(wc,"D") ){
							if(!strcmp(prev,"1"))
								k = 1;
							if(!strcmp(prev,"2"))
								k = 2;
							if(!strcmp(prev,"3"))
								k = 3;
							if(!strcmp(prev,"4"))
								k = 4;
							if(!strcmp(prev,"5"))
								k = 5;
							if(!strcmp(prev,"6"))
								k = 6;
							if(!strcmp(prev,"7"))
								k = 7;
							if(!strcmp(prev,"8"))
								k = 8;
							if(!strcmp(prev,"9"))
								k = 9;
							if(!strcmp(wc,"B"))
								lc = lc + k * 1;
							if(!strcmp(wc,"H"))
								lc = lc + k * 2;
							if(!strcmp(wc,"F"))
								lc = lc + k * 4;
							if(!strcmp(wc,"D"))
								lc = lc + k * 8;
						}
					}
					break;
				}
				if( !strcmp(wc,"EQU")){
					fscanf(fip,"%s",wc);
					sym[j].addr = lc;
					break;
				}
			}
		}
		if(i!=MAX_POT)
			continue;

		//If not found in POT, search for word in MOT
		for(i=0; i<MAX_MOT; i++){
			if(!strcmp(wc,mot[i])){
				//Word found in MOT
				//Determine type of instruction RR or RX and update the LC
				fscanf(fip,"%s",prev);
				fscanf(fip,"%s",wc);
				if( ( !strcmp(prev,"1")|| !strcmp(prev,"2")|| !strcmp(prev,"3")|| !strcmp(prev,"4")|| !strcmp(prev,"5")|| !strcmp(prev,"6")||
					!strcmp(prev,"7")|| !strcmp(prev,"8")|| !strcmp(prev,"9")|| !strcmp(prev,"10")|| !strcmp(prev,"11")|| !strcmp(prev,"12")||
					!strcmp(prev,"13")|| !strcmp(prev,"14")|| !strcmp(prev,"15") ) && ( !strcmp(wc,"1")|| !strcmp(wc,"2")|| !strcmp(wc,"3")|| 
					!strcmp(wc,"4")|| !strcmp(wc,"5")|| !strcmp(wc,"6")|| !strcmp(wc,"7")|| !strcmp(wc,"8")|| !strcmp(wc,"9")|| !strcmp(wc,"10")||
					!strcmp(wc,"11")|| !strcmp(wc,"12")|| !strcmp(wc,"13")|| !strcmp(wc,"14")|| !strcmp(wc,"15") ) ) {
					//Format is RR
					//Here, in RR format, its assumed registers are always specified with nos. and never with variables.
					lc = lc + 2;
				}
				else{
					//Assume RX order always follows
					//Hence, wc can be a literal or a symbol or an address
					if(wc[0] == '='){
						//wc is a literal
						strcpy(lit[literals].name,wc);
						lit[literals++].addr = lc;
					}
					//Address is specified as offset(index,base)
					else if( wc[strlen(wc)-1] == ')' ){
						//last char is ) hence an address
						//Do nothing
					}
					else{
						//wc is a symbol
						//check if it is already present in sym struct
						for(j=0; j<symbols; j++){
							if(!strcmp(wc,sym[j].name)){
								//Symbol already present
								//Do nothing, move on
							}
						}
						if(j==symbols){
							//Add symbol to sym struct
								strcpy(sym[symbols].name,wc);
								sym[symbols++].addr = lc;
						}
					}

					lc = lc + 4;
				}
				break;
			}
		}
		if(i!=MAX_MOT)
			continue;

		//If not found in POT or MOT, check if the word is a literal by checking if it has a '=' at its start
		if(wc[0] == '='){
			//word is a literal
			strcpy(lit[literals].name,wc);
			lit[literals++].addr = lc;
			continue;
		}


		if( !strcmp(wc,"*") ){
			//Do nothing
			continue;
		}

		//If word is not a literal and not found in POT and MOT, it is a symbol
		//Check if it is added in sym struct. 
		for(j=0; j<symbols; j++){
			if(!strcmp(wc,sym[j].name)){
				//symbol already added in struct
				//Scan next word, to get DC/DS/EQU
				fscanf(fip,"%s",wc);
				goto BEWARE;
			} 
		}
		if(i==symbols){
			//Word not found in sym struct, hence encountered for the first time
			//Add the word in sym struct
			strcpy(sym[symbols].name,wc);
			sym[symbols++].addr = lc;
		}
		
	}

	//Write data to output files
	//Literal output not sanitized i.e. =F'5' appears as is instead of 5
	//Its a start
	fprintf(fsym,"SYMBOL TABLE\n\n");
	fprintf(fsym,"NAME\t\t\tLC\n");
	fprintf(fsym, "------------------------------------------------\n\n");
	for(i=0; i<symbols; i++)
		fprintf(fsym, "%s\t\t\t%d\n", sym[i].name,sym[i].addr);
	fprintf(flit,"LITERAL TABLE\n\n");
	fprintf(flit,"NAME\t\t\tLC\n");
	fprintf(flit, "------------------------------------------------\n\n");
	for(i=0; i<literals; i++)
		fprintf(flit, "%s\t\t\t%d\n", lit[i].name,lit[i].addr);

	return 0;
}
Dll
/* Note - not my code but I've tested it. Don't have time for adding comments. 
/*DO NOT change formatting of following i/p file. You can change the content but don't indent or stuff. 

progone.txt

pg1 start
entry a,b
extrn pg2,c
a dc f 4
b ds 6 d
a(a)
a(b+15)
a(c-pg2)
end

progtwo.txt

pg2 start
entry c
extrn a,b
c dc f 7
a(a)
a(b+15)
end

*/

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int lno,n;

typedef struct{
    char sym[100],type[100];
    int id,ra,length;
}esd;

typedef struct{
    char sym[100];
    int addr;
}gest;

void esdcard(esd x[], int file){
    int i,j,k,len;
    char str[100],temp[100];
    FILE *fp;
    n=0;
    if(file==1)
        fp=fopen("progone.txt","r");
    else fp=fopen("progtwo.txt","r");
    loop:while(fgets(str,100,fp)){
        i=0;j=0;
        memset(temp,'\0',100);
        len=strlen(str)-1;
        while(str[i]!=' ' && i<len)
            temp[j++]=str[i++];
        i++;
        if(lno==0){
            strcpy(x[n].sym,temp);
            strcpy(x[n].type,"sd");
            x[n].ra=0;
            n++;lno++;
            memset(temp,'\0',100);
            memset(str,'\0',100);
            goto loop;
        }
        if(lno!=0){
            if(strcmp(temp,"entry")==0){
                j=0;
                memset(temp,'\0',100);
                ld:while(str[i]!=',' && i<len)
                    temp[j++]=str[i++];
                strcpy(x[n].sym,temp);
                strcpy(x[n].type,"ld");
                n++;
                if(str[i]==',' && i<len){
                    i++;
                    memset(temp,'\0',100);
                    j=0;
                    goto ld;
                }
                lno++;
                goto loop;
            }
            if(strcmp(temp,"extrn")==0){
                j=0;
                memset(temp,'\0',100);
                er:while(str[i]!=',' && i<len)
                    temp[j++]=str[i++];
                strcpy(x[n].sym,temp);
                strcpy(x[n].type,"er");
                n++;
                if(str[i]==',' && i<len){
                    i++;
                    memset(temp,'\0',100);
                    j=0;
                    goto er;
                }
                lno++;
                goto loop;
            }
            for(k=0;k<n;k++)
            if(strcmp(x[k].sym,temp)==0){
                x[k].ra=lno;
				memset(temp,'\0',100);
					j=0;
				while(str[i]!=' ' && i<len)
					temp[j++]=str[i++];
				if(strcmp(temp,"dc")==0){
					if(str[i+1]=='b'){
						x[k].length=1;
						x[k].ra=lno;
						lno++;
						goto loop;
					}
					else if(str[i+1]=='h'){
						x[k].length=2;
						x[k].ra=lno;
						lno++;
						goto loop;
					     }
					     else if(str[i+1]=='f'){
							x[k].length=4;
							x[k].ra=lno;
							lno++;
							goto loop;
						  }
						  else if(str[i+1]=='d'){
								x[k].length=8;
								x[k].ra=lno;
								lno++;
								goto loop;
						       }
				}
				if(strcmp(temp,"ds")==0){
					if(str[i+3]=='b'){
						x[k].length=1;
						x[k].ra=lno;
						lno++;
						goto loop;
					}
					else if(str[i+3]=='h'){
						x[k].length=2;
						x[k].ra=lno;
						lno++;
						goto loop;
					     }
					     else if(str[i+3]=='f'){
							x[k].length=4;
							x[k].ra=lno;
							lno++;
							goto loop;
						  }
						  else if(str[i+3]=='d'){
								x[k].length=8;
								x[k].ra=lno;
								lno++;
								goto loop;
						       }
				}
            }
            lno++;

        }
    }
    x[0].length=lno;
    i=1;
    for(k=0;k<n;k++)
        if(strcmp(x[k].type,"ld")==0)
            continue;
        else x[k].id=i++;
    fclose(fp);
}

void main(){
    int i,addr,nbk,m;
    esd a[100],b[100];
    gest g[100];
    printf("Enter the Initial Program Load Address: ");
    scanf("%d",&addr);
    lno=0;nbk=0;
    esdcard(a,1);
    for(i=0;i<n;i++)
        if(strcmp(a[i].type,"sd")==0 || strcmp(a[i].type,"ld")==0){
            strcpy(g[nbk].sym,a[i].sym);
            g[nbk++].addr=a[i].ra+addr;
        }
    m=n;
    addr=addr+lno;
    lno=0;

    esdcard(b,2);
    for(i=0;i<n;i++)
        if(strcmp(b[i].type,"sd")==0 || strcmp(b[i].type,"ld")==0){
            strcpy(g[nbk].sym,b[i].sym);
            g[nbk++].addr=b[i].ra+addr;
        }


    //printing the ESD cards for both the programs and the GEST
    printf("\nPROGRAM 1 ESD CARD:\n\n");
    printf("| SYMBOL | TYPE | ID | RA | Length |\n");
    for(i=0;i<m;i++)
        printf("| %6s | %4s | %2d | %2d | %5d |\n",a[i].sym,a[i].type,a[i].id,a[i].ra,a[i].length);
    printf("\n\nPROGRAM 2 ESD CARD:\n\n");
    printf("| SYMBOL | TYPE | ID | RA | Length |\n");
    for(i=0;i<n;i++)
        printf("| %6s | %4s | %2d | %2d | %5d |\n",b[i].sym,b[i].type,b[i].id,b[i].ra,b[i].length);
   
}
Input2.asm
PG1		START		
		USING		*		BASE
		L			1		FOUR
		A			AC		=F'5'
FOUR	DC 			F 		4
BASE 	EQU			8
		END
Input3.asm
JOHN 		START		0
			USING		*		15
			L			1 		FIVE
			A			1 		FOUR
			ST 			1 		TEMP
FOUR		DC			F 		4
FIVE		DC			F 		5
TEMP		DS			1 		F
			END

Lexicalanalyzer1
/*
WHAT THIS PROGRAM WILL DO - 
 classify tokens
 remove duplicate tokens
 write tokenized string (kinda. This part does what is done in file. Use additional switch case as used in file.)
WHAT THIS PROGRAM WON'T DO - 
recognize errors
*/ 




#include<stdio.h>
#include<string.h>
#include<stdlib.h>


void removeduplicate();
void printing();
int Isiden(char ch);
int Isop(char ch);
int Isdel(char ch);
int Iskey(char * str);
void removeduplicate();

char op[8]={'+','-','*','/','=','<','>','%'};
char del[8]={'}','{',';','(',')','[',']',','};
char *key[]={"int","void","main","char","float"};

//char *operato[]={"+","-","/","*","<",">","=","%","<=",">=","++"};

int p=0,q,r,s;
int idi=0,idj=0,k,opi=0,opj=0,deli=0,uqdi=0,uqidi=0,uqoperi=0,kdi=0,liti=0,ci=0; // loop variables and counters
int uqdeli[20],uqopi[20],uqideni[20],l=0,j; // arrays used to remove duplicate tokens
char uqdel[20],uqiden[20][20],uqop[20][20],keyword[20][20];
char iden[20][20],oper[20][20],delem[20],literal[20][20],lit[20],constant[20][20]; //arrays for various tokens generated

void lexanalysis(char *str)
 {
   int i=0;
   while(str[i]!='\0')
    {
     if(Isiden(str[i]))     //for identifiers
       {
          while(Isiden(str[i]))
        {
            iden[idi][idj++]=str[i++];
        }
          iden[idi][idj]='\0';
          idi++;idj=0;
       }

      else
      if(Isop(str[i]))        // for operators
          {
         while(Isop(str[i]))
            {
             oper[opi][opj++]=str[i++];
            }
         oper[opi][opj]='\0';
         opi++;opj=0;
          }
       else
       if(Isdel(str[i]))     //for delemeters
          {
          while(Isdel(str[i]))
            {
              delem[deli++]=str[i++];
            }
           }
        else
           {
            i++;
        }
     }

   removeduplicate();
   printing();
}

int Isiden(char ch)
 {
   if(isalpha(ch)||ch=='_'||isdigit(ch)||ch=='.')
   return 1;
   else
   return 0;
 }

int Isop(char ch)
 {
  int f=0,i;
  for(i=0;i<8&&!f;i++)
   {
    if(ch==op[i])
     f=1;
   }
 return f;
}

int Isdel(char ch)
 {
  int f=0,i;
  for(i=0;i<8&&!f;i++)
   {
    if(ch==del[i])
     f=1;
   }
 return f;
 }

int Iskey(char * str)
{
  int i,f=0;
  for(i=0;i<5;i++)
   {
    if(!strcmp(key[i],str))
      f=1;
    }
  return f;
}

void removeduplicate()
 {
   int i,j;
   for(i=0;i<20;i++)   //initialize arrays keping count of a token to 0.
    {
     uqdeli[i]=0;
     uqopi[i]=0;
     uqideni[i]=0;
    }
   for(i=1;i<deli+1;i++)  //removing duplicate delimiters
    {
       if(uqdeli[i-1]==0)   //start scanning the count_array, if the count if 0 means we are encountering a new token
     {
           uqdel[uqdi++]=delem[i-1]; // store that token in unique_token array
           for(j=i;j<deli;j++)
          {
               if(delem[i-1]==delem[j]) //repeated token, increment count_array value
                uqdeli[j]=1;
          }
      }
    }

    // similar pricedure for all the tokens to remove duplicates.

    for(i=1;i<idi+1;i++)  //removing duplicate  identifiers
       {
      if(uqideni[i-1]==0)
         {
        strcpy(uqiden[uqidi++],iden[i-1]);
        for(j=i;j<idi;j++)
         {
            if(!strcmp(iden[i-1],iden[j]))
               uqideni[j]=1;
         }
          }
    }

     for(i=1;i<opi+1;i++)  //removing duplicate  operators
     {
        if(uqopi[i-1]==0)
           {
           strcpy(uqop[uqoperi++],oper[i-1]);
           for(j=i;j<opi;j++)
             {
               if(!strcmp(oper[i-1],oper[j]))
                 uqopi[j]=1;
             }
           }
     }

 }
void printing()
 {
  int i=0;
  idi=0;
  for(i=0;i<uqidi;i++)
   {
     if(Iskey(uqiden[i]))      //identifying keywords
     strcpy(keyword[kdi++],uqiden[i]);
     else
      if(isdigit(uqiden[i][0]))    //identifying constants
     strcpy(constant[ci++],uqiden[i]);
     else
     strcpy(iden[idi++],uqiden[i]);
   }

// printing the outputs

printf("\n\tDelimiters are : \n");
for(i=0;i<uqdi;i++)
printf("\t%c\n",uqdel[i]);

printf("\n\tOperators are : \n");
for(i=0;i<uqoperi;i++)
 {
 printf("\t");
 puts(uqop[i]);
 }

printf("\n\tIdentifiers are : \n");
for(i=0;i<idi;i++)
 {
  printf("\t");
  puts(iden[i]);
 }

printf("\n\tKeywords are : \n");
for(i=0;i<kdi;i++)
 {
  printf("\t");
  puts(keyword[i]);
 }

printf("\n\tConstants are :\n");
for(i=0;i<ci;i++)
  {
  printf("\t");
  puts(constant[i]);
  }


}
void main()
{
    int length;
  char str[50];
  printf("\nEnter the string : ");
  scanf("%[^\n]c",str);
  lexanalysis(str);
  length = strlen(str);
  printf("The tokenized form of entered string is: \n");
  for(p=0;p<length;p++)
  {
        if(Isiden(str[p]))
            printf("id%d ",p);
        else if(Isop(str[p]))
            printf("op%d ",p);
        else
            printf("delim ");
  }

}
Lexicalanalyzer2
#include<stdio.h>
#include<string.h>
#include<stdlib.h>

int isIdentifier(char ch);
int isOperator(char ch);
int isDelimiter(char ch);
int isConstant(char ch);

char operator[8]={'+','-','*','/','=','<','>','%'};   //list of operators used in isOperator
char delimiter[8]={'}','{',';','(',')','[',']',','};    //list of delimiters used in isDelimiter

int isIdentifier(char ch)
{
    if (isalpha(ch))
        return 1;
    else return 0;
}

int isOperator(char ch)
{
    int i,f=0;
    for(i=0;i<sizeof(operator);i++)
    {
        if (ch == operator[i])
        {
            f=1;
            break;
        }
    }
    return f;
}

int isDelimiter(char ch)
{
    int i,f=0;
    for(i=0;i<sizeof(delimiter);i++)
    {
        if (ch == delimiter[i])
        {
            f=1;
            break;
        }
    }
    return f;
}

int isConstant(char ch)
{
    if (isdigit(ch))
        return 1;
    else return 0;
}

void main()
{
    int i,id=1,op=1,delim=1,con=1;
    char str[50];
    printf("Enter the input string : ");
    scanf("%[^\n]c",str);

    printf("\nIdentifiers: ");
    for(i=0;i<strlen(str);i++)  //scans entire input and displays all identifiers
    {
        if(isIdentifier(str[i]))
            printf("%c ",str[i]);
    }
    printf("\n");

    printf("\nOperators: ");    //scans entire input and displays all operators
    for(i=0;i<strlen(str);i++)
    {
        if(isOperator(str[i]))
            printf("%c ",str[i]);
    }
    printf("\n");

    printf("\nDelimiters: ");   //scans entire input and displays all delimiters
    for(i=0;i<strlen(str);i++)
    {
        if(isDelimiter(str[i]))
            printf("%c ",str[i]);
    }
    printf("\n");

    printf("\nConstants: ");    //scans entire input and displays all constants
    for(i=0;i<strlen(str);i++)
    {
        if(isConstant(str[i]))
            printf("%c ",str[i]);
    }
    printf("\n");

    printf("\nTokenized string is: ");  //output in token form
    for (i=0;i<strlen(str);i++)         //checks for each element of input if it is identifier, operator, delimiter or constant and prints its token form
    {
        if(isIdentifier(str[i]))
            printf("<id%d>",id++);
        else if (isOperator(str[i]))
            printf("<op%d>",op++);
        else if (isDelimiter(str[i]))
            printf("<delim%d>",delim++);
        else if (isConstant(str[i]))
            printf("<con%d>",con++);
    }
    printf("\n");
}

Macro
/*Note: This program only fills MNT and MDT. 
It doesn't contain PASS 2 
i.e. it doesn't expand the macro call in alp with macro definition
*/

/* input1.txt
PQR MACRO &ARG1
- L 2,&ARG1
- A 1,&ARG1
- MEND -
PG1 START 1000
- ABC DATA
DATA DC F,4
- END -
*/

#include <stdio.h>
#include <stdlib.h>
#include<string.h>
void main()
{
    FILE *f1,*f2,*f3,*f4;
    char mne[20],opnd[20],la[20];
    f1=fopen("input1.txt","r");
    f2=fopen("mnt.txt","w+");
    f3=fopen("mdt.txt","w+");
    f4=fopen("output.txt","w+");

    fscanf(f1,"%s%s%s",la,mne,opnd); // READS THE FIRST LINE OF THE PROGRAM input1.txt

    do
        //while(strcmp(mne,"MEND")!=0) i.e till we don't encounter 'MEND'
    {
        if(strcmp(mne,"MACRO")==0)    
            /*means MACRO is present. The string before keyword 'MACRO' is the name of macro (to be stored in MNT)
             and following that is MACRO definition (to be stored in MDT)*/
        {
            fprintf(f2,"%s\n",la);          //stores macro name in MNT
            fprintf(f3,"%s\t%s\n",la,opnd); //stores the first line which is start of macro in MDT too
        }
        else
            fprintf(f3,"%s\t%s\n",mne,opnd); //stores rest of the macro definition in MDT
        fscanf(f1,"%s%s%s",la,mne,opnd); //read next line of input1.txt
    }while(strcmp(mne,"MEND")!=0);
    
    fprintf(f3,"%s",mne);
    fscanf(f1,"%s%s%s",la,mne,opnd);
    if(strcmp(mne,"START")==0)       //Now store the alp program in output.txt
    {
        do
        {
            fprintf(f4,"%s\t%s\t%s\n",la,mne,opnd);
            fscanf(f1,"%s%s%s",la,mne,opnd);
        }while(strcmp(mne,"END")!=0);
        fprintf(f4,"%s\t%s\t%s\n",la,mne,opnd);
    }

    fclose(f1);
    fclose(f2);
    fclose(f3);
    fclose(f4);
}
Symtab

#include<stdio.h>

void main()
{
	FILE *fp1,*fp2;
	char z, a[100],b[10],c[10],s[10]="START",d[10]="DC",e[10]="EQU"; 

	int i,n,j,k,l=0,val=0;
	fp1=fopen("abc.txt","r");
	fp2=fopen("put.txt","w");
	fprintf(fp2,"Symbol\tValue\tLength\tR/A\n");
    while(feof(fp1)==0) 
	{ 
        fscanf(fp1,"%s",a); 
        fscanf(fp1,"%s",b); 
        if(strcmp(b,s)==0 || strcmp(b,d)==0 || strcmp(b,e)==0) 
            { 
                fprintf(fp2,"%s\t\t",a); 
				printf("%s",b); 
                if(strcmp(b,s)==0 || strcmp(b,e)==0) 
                    l=1; 
                else if(strcmp(d,b)==0) 
                    {
                    	fscanf(fp1,"%s",c);
                    	
                    	if(strcmp(c,"F")==0)
                    		l=4;
                    	else if(strcmp(c,"B")==0)
                    		l=1;
                    	else if(strcmp(c,"H")==0)
                    		l=2;
                    	else if(strcmp(c,"D")==0)
                    		l=8;
                    	fscanf(fp1,"%s",c);	
                    } 
                if(strcmp(b,s)==0) 
                { 
                    fprintf(fp2,"\t"); 
                    fprintf(fp2,"%d\t",val);
                     
                } 
                else if(strcmp(b,d)==0 || strcmp(b,e)==0) 
                { 
                    val+=4;
                    printf("%s",b); 
                    fprintf(fp2,"%d\t",val);
                     
                } 
                 fprintf(fp2,"%d\t\t",l); 
                 
                    z='R'; 
                
                    
                fprintf(fp2,"%c",z); 
                fprintf(fp2,"\n"); 
            } 
          printf("0"); 
	} 

    fclose(fp1);
	fclose(fp2);
}

/*
abc.txt:

PG1     START
            USING         *	  BASE
            L	       1	  FOUR
FOUR  DC	       F	  4
BASE  EQU	       8
           END
*/
With deadcode
import java.util.*;
public class withDeadCode
{
	public static void main(String s[])
	{
		long start,end;
		start=System.currentTimeMillis();
		int[] a=new int[2500000];
		int[] b= new int[2500000];
		int[] c= new int[2500000];
		int A = 30;
		int B = 40;
		int C = A+B;
		double D = C+3.14;
		
		System.out.println("Addition of "+A+" and "+B+" is: "+C);
		System.out.println("Adding PI in answer is: "+D);
		
		//following is unreachable code
		for(int i=0;i<a.length;i++)
		{
			a[i]=i;
		} 
		for(int j=0;j<a.length;j++)	
		{
			b[j]=a[j] * 10;
		}
		
		end=System.currentTimeMillis();
		long time = end - start;
		System.out.println("Execution time: "+time);
	}
}
Withinline
import java.util.*;
class withinline
{
	public static void main(String args[])
	{
	int a,b;
	long starttime,endtime,extime;
	starttime=System.nanoTime();
	a=5+2+1;
	b=7+3+1;
	System.out.println("A="+a+"B="+b);
	endtime=System.nanoTime();
	extime= (endtime-starttime);
	System.out.println("execution time="+extime);
	}
}
Withloopopt
import java.util.*;
public class withloopopt
{
	public static void main(String s[])
	{
	long start,end;
	int[] a=new int[2500000];
	int[] b= new int[2500000];
	for(int i=0;i<a.length;i++)
		{
		a[i]=i;
		} 
	start=System.currentTimeMillis();
	System.arraycopy(a,0,b,0,b.length);
	end=System.currentTimeMillis();
	System.out.println(end-start + " milli seconds for loop copy ");
	}
}
Withoutdeadcode
import java.util.*;
public class withoutDeadCode
{
	public static void main(String s[])
	{
		long start,end;
		start=System.currentTimeMillis();
		//int[] a=new int[2500000];
		//int[] b= new int[2500000];
		//int[] c= new int[2500000];
		int A = 30;
		int B = 40;
		int C = A+B;
		double D = C+3.14;
		
		System.out.println("Addition of "+A+" and "+B+" is: "+C);
		System.out.println("Adding PI in answer is: "+D);
		
		//following is unreachable code
		/*for(int i=0;i<a.length;i++)
		{
			a[i]=i;
		} 
		for(int j=0;j<a.length;j++)	
		{
			b[j]=a[j] * 10;
		}*/
		
		end=System.currentTimeMillis();
		long time = end - start;
		System.out.println("Execution time: "+time);
	}
}
Withoutinline
import java.util.*;
class differentclass
{
	public int addplusone(int x, int y)
	{
	int z= x+y+1;
	return z;
	}
}
class withoutinline
{
	public static void main(String args[])
	{
	int a,b;
	long starttime,endtime,extime;
	starttime=System.nanoTime();
	differentclass obj=new differentclass();
	a=obj.addplusone(5,4);
	b=obj.addplusone(7,8);
	System.out.println("A="+a+"B="+b);
	endtime=System.nanoTime();
	extime= (endtime-starttime);
	System.out.println("execution time="+extime);
	}
}
Withoutloopopt
import java.util.*;
public class withoutloopopt
{
	public static void main(String s[])
	{
	long start,end;
	int[] a=new int[2500000];
	int[] b= new int[2500000];
	for(int i=0;i<a.length;i++)
		{
		a[i]=i;
		} 
	start=System.currentTimeMillis();
	for(int j=0;j<a.length;j++)	
		{
		b[j]=a[j];
		}
	end=System.currentTimeMillis();
	System.out.println(end-start + " milli seconds for loop copy ");
	}
}
Withoutpeepholeopt
import java.util.*;
public class withoutPeepholeOpt
{
	public static void main(String s[])
	{
		long start,end;
		start=System.currentTimeMillis();
		
		//Constant folding
		int a = 2 * 3; 
		int b = 5 + 6;
		int c = 8 - 4;
		
		System.out.println("----Constant folding----");
		System.out.println(" Value of a: "+a);
		System.out.println(" Value of b: "+b);
		System.out.println(" Value of c: "+c);
		
		//Strength reduction
		int a1 = a * 2;
		int b1 = b * 3;
		double c1 = c / 2;
		
		System.out.println("----Strength reduction----");
		System.out.println(" Value of a1: "+a1);
		System.out.println(" Value of b1: "+b1);
		System.out.println(" Value of c1: "+c1);
		
		//Null sequences
		a = a + 0;
		b = b * 1;
		c = c * 1 + 0;
		
		System.out.println("----Null sequences----");
		System.out.println(" Value of a: "+a);
		System.out.println(" Value of b: "+b);
		System.out.println(" Value of c: "+c);
		
		//Combine operations
		int a2 = a * 2;
		int a3 = a2 * 1;
		
		System.out.println("----Combine operations----");
		System.out.println(" Value of a3: "+a);
		
		//Algebraic laws
		int a4 = a;
		int a5 = a4;
		
		System.out.println("----Algebraic laws----");
		System.out.println(" Value of a5: "+a5);
		
		//Common sub-expression elimination
		int a6 = b * c + 5;
		int a7 = 10 + b * c;
		
		System.out.println("----Common sub-expression elimination----");
		System.out.println(" Value of a6: "+a6);
		System.out.println(" Value of a7: "+a7);
		
		end=System.currentTimeMillis();
		long time = end - start;
		System.out.println("Execution time: "+time);
	}
}
Withpeepholeopt
import java.util.*;
public class withPeepholeOpt
{
	public static void main(String s[])
	{
		long start,end;
		start=System.currentTimeMillis();
		
		//Constant folding
		int a = 6;
		int b = 11;
		int c = 4;
		
		System.out.println("----Constant folding----");
		System.out.println(" Value of a: "+a);
		System.out.println(" Value of b: "+b);
		System.out.println(" Value of c: "+c);
		
		//Strength reduction
		int a1 = a+a;
		int b1 = b+b+b;
		double c1 = c>>1;
		
		System.out.println("----Strength reduction----");
		System.out.println(" Value of a1: "+a1);
		System.out.println(" Value of b1: "+b1);
		System.out.println(" Value of c1: "+c1);
		
		//Null sequences removed
		
		//Combine operations
		int a3 = a+a;
		
		System.out.println("----Combine operations----");
		System.out.println(" Value of a3: "+a);
		
		//Algebraic laws
		int a5 = a;
		
		System.out.println("----Algebraic laws----");
		System.out.println(" Value of a5: "+a5);
		
		//Common sub-expression elimination
		int temp = b * c;
		int a6 = temp + 5;
		int a7 = 10 + temp;
		
		System.out.println("----Common sub-expression elimination----");
		System.out.println(" Value of a6: "+a6);
		System.out.println(" Value of a7: "+a7);
		
		end=System.currentTimeMillis();
		long time = end - start;
		System.out.println("Execution time: "+time);
	}
}


